cpp information:

1. Basic difference in structure and function is :
	all variables and functions in strutcure are by defualt public
	all variables and functions in class are by defualt private

2. Function overloading perform on the paraeters to the function not on the return type.
eg.	void area(int)
	void area(int,int,int=0)
	
	->Here advantage of function overloading is that if third integer value i not pass to the 
	  function then by defualt it takes 0/defined by you.

3. Pointers and Reference are same in nature but representation is different.
eg. 	int x=5
	int *p=&x;      <- Pointer
	
	int &y=x;	<-Reference
	y++; //incrementing the value of the x

4. Inline Function : inline fun();
	-> its not a command its request to the compiler.
	-> compiler only converts the function in one line
	-> Compiler will ignore the request if:
		-> function contains loops,switch, goto
		-> function with recusrion
		-> cointaining static variable

5. Varibles and functions inside the class are not class varibles or class functions
eg. 
	class book{};
	book b1;
	
	-> Object is an instance of class.
	-> here variables and functions in "book object" are seperate for each and every instance of the 
	  object. Means all variables and functions are different for each instance.
	-> Because of this var and functions are "not calles class Vairbles or class functions"
	  instead they called as "Instance Member variable" and "Instance Member functions"
	-> as you defines the object book but it does not have any value untill you define 
	  the instance. And you call object with the instance and instance member functions.

6. Inside the class if you write 
	int x=10; //it is Instance Member variable
	static int x=10; // It is Static Member Varible / "Class Variable".
	
	-> If you dont create a instance of the object then also static varibales (class variables)
	  is created rather creating the instance of the object.
	-> To assign value to the Static variable(class variable) you have to declare it outside of the class		eg. float Account::book_price=3.5;
	-> if Static variable is public then we can set the data in static variable in main function
		Account::roi=3.5;
	   if it is private in nature then write a function in class to set a value ot static variable
		eg : 
			class Account
			{
				private:
					static float roi; //class varibale
				
				public:
					static void setvalue(float r) //Static Member Function
					{
						roi=r;
					}
			};

			main()
			{
				Account a1,a2;
				a1.setvalue(4.5);
				Account::setvalue(4.5);
			}
		As it is global in nature. Any instance of object must not be compulsion to change the value
		it must be access from outside of the class. only we have to write in Main function and call
		to the perticular instance member varibale.

7. Constructor : 
	-> Name is same as class
	->its a member function of class
	-> dont have any return type, so cant use the return keyword
	->It can not be static 

	*** Constructors are mainly used for initialization. When we declare the instance of the object 
	   then constructor gets called.
	
	Why Constructor?
	--> Constructor makes object as a object. It is duty of constructor to make a object a object.
		*** Constructor is guareentee functions which will called when you declare the instance.
			it will do the member variable initialization.
	
	When an object gets created then constructor gets called that is called as the "Default Constructor".
	Compiler created this constructor.
	
	We can do constructor overloading in cpp, by declaring the constructor with different parameteres.
	
	** Compiler created 2 constructors in as class 
	1. Default Constructor
	2. Copy Constructor

	if in your class, create a constructor which in like normal constructor then compiler will not
	create a default constructor, but will create a copy constructor.

	Destructor called by the cpp compiler by default. if we want to write the destructor then we can you 		~ symbol infront of the constructor with the { //Nothing Inside}

8. Operator Overloading : 
	when we want to do operation on 2 instances then we use the operator over...
	eg:
		Complex operator +(Complex c)
		{
			a
			b
		}
		call in main

		main()
		{
			c3=c1+c2;                 //Type 1
			c3=c1.operator+(c2):      //Type 2
		}
	** When operator overloaed with multiple jobs then it is known as ope overloading.
	We cant use the "sizeof" and "?:" as a operator overloading.
	** In Operator Overloading only we have to add a operator keyword in from of the operator
	so we can use it for add etc. Any valid operator in C can be used in operator overloading.
	
	**we can overload Unary and binary opearators 
	eg. Unary Operator Overloading
	
	Complex operator -()
	{
		Complex temp;
		temp.a=-a;
		temp.b=-b;
		return temp;
	}
	-----------------------------------------------
	**For Pre and Post increment 

	Complex operator++()       //////For Pre Increment
	{
		Complex temp;
		temp.x=++x;
		return temp;
	}

	Only by writting the int int the parameter compiler understabds that it is Post increment

	Complex operator++(int)      /////Post Increment
	{
		Complex temp;
		temp.x=++x;
		return temp;
	}

	main()
	{
		Complex i1,i2;
		i2=i1++;
		i2=++i1;
	}	
	
	--------------------------------------------------
	
	
	Polymorphism has 2 types :
	1. Compile Time : -> 1. Function Overloading
			  -> 2. Operator Overloading
	2. Run Time 	: -> Virtual Function 

9. Friend Function
	
	It is a function which is of the class but not declared in a class. Its only friend of that class.
	Declared in class but defined outside. While declaring we have to write friend keyword in the class.
	
	Friend function can access any member function of class like member function(function which is 
	declared in a class).Only thing is that it can not access directly like member function.
	
	Friend function can become friend of more than one class(multiple class)
		
	There is no such condition to declare friend function in public or private
	as its not a member function you can declare it in any thing public, private, protected

	** Main advantage of friend function is that it can be used as for 2 classes. This is very
	important as it can also access the private member variables.
	
	** We can use friend function for getting the input from user and printing 
	
	** For Cout

	friend ostream& operator<<(ostream&,Complex);
	
	ostream& operator<<(ostream &dout,Complex c)
	{
		cout<<c.a<<" "<<c.b<<endl;
		return dout;
	}
	
	cout<<c1;

	** For Cin
	friend istream& operator>>(istream&,Complex&);

	istream& operator>>(istream &din,Complex &c)
	{
		cin>>c.a>>c.b;
		return din;
	}
	
	cin>>c1;

	*** Member function of one class can become friend function of other class is possible using 
	friend.
	
10.Inheritance:

	When you have a class A and you have another class B and want to use the all properties of
	class A in class B then we use inheritance
	eg Class A (Normal car)
	  Class B (Sports car) //will have all things of normal car also few addition.

	class car
	{
	
	}

	class sports_car:public car
	{

	}

	*Typed of Inheritance: 
	
	1.Single Level
	2. Multilevel 
	3. Multiple 
	4. Hierarchical
	5. Hybrid

	1. Single Level

	class A    class B:public A
	{	   {
	}	   }

	2. Multilevel

	class A     class B:public A   class C:public B
	{	    {		       {
	}	    }		       }

	3. Multiple

	class A    class B    class C:public A,public B
	{          {          {
	}          }          }
	
	4. Hierarchical

	class A   class B1:public A  class B2:public A
	{	  {                  { 
	}         }                  }

	5. Hybrid 
	It is mixer of more than 1 inheritance so called hybrid.

	** Access Specifiers :

	1. Public    - Access to all class and object
	2. Private   - Only to the class
	3. Protected - only access to class and "Derived object"
	

	** Type of user of class:

	User 1. Who create object of your class
	User 2. Who will "derived" from your class

	** If there is any relation in 2 entities then called as Association
	
	eg. Banana is a fruit

	** Association  Types:

	1. Aggregation
	2. Composition
	3. Inheritance

11. Other points

	new and delete are used as the malloc and free

12. Function Overriding and Hiding

	** Overriding
	eg. Method Overriding and Hiding
	class A
	{
		public: void fun(){}
			void fun2(){}
	}
	
	class B:public A
	{
		public: void fun(){}   //Methof Oerriding
	}		void fun2(int x){} //Method Hiding
	
	if call is from class B object, abd that function not found in the class B then it search in
	the class A. If present then it will not search.

	Function Overloading is different from the overridding.
	Function overriding occures in the inheritance while overloading occures if, we have defined 
	same functions in the same class. Not in different class.
